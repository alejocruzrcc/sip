# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies
#  and run tests with Rake
# For more information see:
#  https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby
---

name: Ruby

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    env:
      RAILS_ENV: test
      NODE_ENV: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['3.0']

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        # To automatically get bug fixes and new Ruby versions for
        # ruby/setup-ruby,
        # change this to (see https://github.com/ruby/setup-ruby#versioning):
        uses: ruby/setup-ruby@v1
        #  uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true
          # runs 'bundle install' and caches installed gems automatically
      - name: Revisar entorno
        run: |
          pwd
          echo $HOME
          whoami
          locale -a
      - name: Preparar .env
        run: |
          cp test/dummy/.env.github test/dummy/.env

      - name: Instalar bundle
        # Ideas de
        # https://github.com/hostolab/covidliste/blob/main/.github/workflows/test.yml
        run: |
            gem install bundle
            bundle update --bundler
            bundle install --jobs 4 --retry 3 --path 'vendor/bundle' --without development production
      - name: Versión de node.js
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - name: Configurar Node
        uses: actions/setup-node@v2
        with:
          node-version: "${{ steps.nvm.outputs.NODE_VERSION }}"
      - name: Ruta a yarn
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache para node_modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Instalar Yarn
        run: yarn install --frozen-lockfile
      - name: Localización
        run: |
          sudo locale-gen --no-archive es_CO.UTF-8
          locale -a
      - name: Preparar BD
        run: |
          cd test/dummy
          echo "*:*:*:postgres:postgres" > ~/.pgpass
          chmod 0600 ~/.pgpass
          psql -h localhost -c 'CREATE DATABASE sipdes_pru;' -U postgres
          bundle exec rails db:create
          bundle exec rails db:setup
          bundle exec rails db:migrate
          bundle exec rails sip:indices
          cd ../..
      - name: Ejecutar pruebas
        run: CONFIG_HOSTS=www.example.com bundle exec rails test -b
      - name: Acción Brakeman
        uses: artplan1/brakeman-action@v1.2.1
      - name: Ejecutar pruebas
        run: bundle exec rake
